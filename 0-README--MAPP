This is MAPP, the Berkeley Model and Algorithm Prototyping Platform. 

It includes STEAM, a framework for table-based device modeling under the STEAM
directory. For details on the framework, refer to STEAM/0-README

Quickstart
-------------------------------------------------------------------------------

0. MAPP's license is laid out in the file 00-LICENSE in this directory.
   MAPP is released under the GPL-v3. The 00-LICENSE file contains additional
   important details; if you have not read it, please do so.

1. Setup/installation:

    $ autoconf 

    $ ./configure
      # note: the standard arguments --prefix and --exec-prefix
      #       are not used by MAPP at this point.

    $ make # this will also "install"
    
    The above will create a local installation under ./MAPP-$version/,
    soft linked to ./MAPP-locallinks-installation for convenience. This
    "installation" merely sets up soft links to files in your git working
    copy, so edits to these change the original files. This is convenient for
    code development.
    
    Follow the instructions printed out by make above to ensure that MAPP is
    set up whenever you start MATLAB.

    It is best to make clean before make, since the "installation"
    is non-standard (makes soft links instead of compiling or copying).

    Some useful make targets are:

    $ make releasesnapshot # creates a tarball of your installation
                           # under /var/tmp/, suitable for sending
                           # others as a snapshot of the installation.

    $ make clean           # removes the installation

    $ make autoclean       # removes the Makefile.

3. Testing the installation:

    - Copy or soft link the file start_MAPP.m to ~/Documents/MATLAB/ (or some
      other directory in MATLAB's default path).

    - Start MATLAB. Within MATLAB, give the commands:

        start_MAPP 
        run_BJTdiffpair_DCsweep % a quick test, should produce a tanh() curve
        MAPPtest_quick
        MAPPtest % takes about 10m in MATLAB; longer in Octave
        % MAPPtest('showresults') % to see outputs/plots
        % the following are not maintained regularly, might throw some errors
        run_ALL_A1oDAEAPI_tests % this takes a long time
        run_ALL_A2oDAEAPI_tests % if you have access to the A2oDAEAPI submodule
        run_ALL_A3oDAEAPI_tests % if you have access to the A3oDAEAPI submodule

4. To clean up the installation (eg, prior to commit/push):

    $ make clean
    $ make autoclean

5. Step 3 above does not test A2oDAEAPI or A3oDAEAPI functionalities. Running
   run_ALL_A2oDAEAPI_tests and run_ALL_A3oDAEAPI_tests will illustrate and
   test some of this functionality. Warning: these can take a long time to
   run.
